package jgloom.gl.functions.texture;

import java.nio.*;

/**
 * A texture is an OpenGL Object that contains one or more images that all have the same image format. A texture can be
 * used in two ways. It can be the source of a texture access from a Shader, or it can be used as a render target.
 * This defines basic image 2D functions for textures
 */
public interface GLFTextureImage2D extends GLFTexture {
    /**
     * <p><a href="http://www.opengl.org/sdk/docs/man/html/glTexImage2D.xhtml">OpenGL SDK Reference</a></p>
     *
     * @param target         the texture target. One of: GL_TEXTURE_2D TEXTURE_2D, GL_TEXTURE_1D_ARRAY TEXTURE_1D_ARRAY, GL_TEXTURE_RECTANGLE TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP TEXTURE_CUBE_MAP, GL_PROXY_TEXTURE_2D PROXY_TEXTURE_2D, GL_PROXY_TEXTURE_1D_ARRAY PROXY_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_RECTANGLE PROXY_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_CUBE_MAP PROXY_TEXTURE_CUBE_MAP
     * @param level          the level-of-detail number
     * @param internalformat the texture internal format. One of: GL_RED RED, GL_RG RG, GL_RGB RGB, GL_RGBA RGBA, GL_DEPTH_COMPONENT DEPTH_COMPONENT, GL_DEPTH_STENCIL DEPTH_STENCIL, GL_R8 R8, GL_R8_SNORM R8_SNORM, GL_R16 R16, GL_R16_SNORM R16_SNORM, GL_RG8 RG8, GL_RG8_SNORM RG8_SNORM, GL_RG16 RG16, GL_RG16_SNORM RG16_SNORM, GL_R3_G3_B2 R3_G3_B2, GL_RGB4 RGB4, GL_RGB5 RGB5, GL_RGB565 RGB565, GL_RGB8 RGB8, GL_RGB8_SNORM RGB8_SNORM, GL_RGB10 RGB10, GL_RGB12 RGB12, GL_RGB16 RGB16, GL_RGB16_SNORM RGB16_SNORM, GL_RGBA2 RGBA2, GL_RGBA4 RGBA4, GL_RGB5_A1 RGB5_A1, GL_RGBA8 RGBA8, GL_RGBA8_SNORM RGBA8_SNORM, GL_RGB10_A2 RGB10_A2, GL_RGB10_A2UI RGB10_A2UI, GL_RGBA12 RGBA12, GL_RGBA16 RGBA16,  GL31#GL_RGBA16_SNORM RGBA16_SNORM,  GL21#GL_SRGB8 SRGB8,  GL21#GL_SRGB8_ALPHA8 SRGB8_ALPHA8,  GL30#GL_R16F R16F,  GL30#GL_RG16F RG16F,  GL30#GL_RGB16F RGB16F,  GL30#GL_RGBA16F RGBA16F,  GL30#GL_R32F R32F,  GL30#GL_RG32F RG32F,  GL30#GL_RGB32F RGB32F,  GL30#GL_RGBA32F RGBA32F,  GL30#GL_R11F_G11F_B10F R11F_G11F_B10F,  GL30#GL_RGB9_E5 RGB9_E5,  GL30#GL_R8I R8I,  GL30#GL_R8UI R8UI,  GL30#GL_R16I R16I,  GL30#GL_R16UI R16UI,  GL30#GL_R32I R32I,  GL30#GL_R32UI R32UI,  GL30#GL_RG8I RG8I,  GL30#GL_RG8UI RG8UI,  GL30#GL_RG16I RG16I,  GL30#GL_RG16UI RG16UI,  GL30#GL_RG32I RG32I,  GL30#GL_RG32UI RG32UI,  GL30#GL_RGB8I RGB8I,  GL30#GL_RGB8UI RGB8UI,  GL30#GL_RGB16I RGB16I,  GL30#GL_RGB16UI RGB16UI,  GL30#GL_RGB32I RGB32I,  GL30#GL_RGB32UI RGB32UI,  GL30#GL_RGBA8I RGBA8I,  GL30#GL_RGBA8UI RGBA8UI,  GL30#GL_RGBA16I RGBA16I,  GL30#GL_RGBA16UI RGBA16UI,  GL30#GL_RGBA32I RGBA32I,  GL30#GL_RGBA32UI RGBA32UI,  GL14#GL_DEPTH_COMPONENT16 DEPTH_COMPONENT16,  GL14#GL_DEPTH_COMPONENT24 DEPTH_COMPONENT24,  GL14#GL_DEPTH_COMPONENT32 DEPTH_COMPONENT32,  GL30#GL_DEPTH24_STENCIL8 DEPTH24_STENCIL8,  GL30#GL_DEPTH_COMPONENT32F DEPTH_COMPONENT32F,  GL30#GL_DEPTH32F_STENCIL8 DEPTH32F_STENCIL8,  GL30#GL_COMPRESSED_RED COMPRESSED_RED,  GL30#GL_COMPRESSED_RG COMPRESSED_RG,  GL13#GL_COMPRESSED_RGB COMPRESSED_RGB,  GL13#GL_COMPRESSED_RGBA COMPRESSED_RGBA,  GL21#GL_COMPRESSED_SRGB COMPRESSED_SRGB,  GL21#GL_COMPRESSED_SRGB_ALPHA COMPRESSED_SRGB_ALPHA,  GL30#GL_COMPRESSED_RED_RGTC1 COMPRESSED_RED_RGTC1,  GL30#GL_COMPRESSED_SIGNED_RED_RGTC1 COMPRESSED_SIGNED_RED_RGTC1,  GL30#GL_COMPRESSED_RG_RGTC2 COMPRESSED_RG_RGTC2,  GL30#GL_COMPRESSED_SIGNED_RG_RGTC2 COMPRESSED_SIGNED_RG_RGTC2,  GL42#GL_COMPRESSED_RGBA_BPTC_UNORM COMPRESSED_RGBA_BPTC_UNORM,  GL42#GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM COMPRESSED_SRGB_ALPHA_BPTC_UNORM,  GL42#GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT COMPRESSED_RGB_BPTC_SIGNED_FLOAT,  GL42#GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT,  GL43#GL_COMPRESSED_RGB8_ETC2 COMPRESSED_RGB8_ETC2,  GL43#GL_COMPRESSED_SRGB8_ETC2 COMPRESSED_SRGB8_ETC2,  GL43#GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2,  GL43#GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2,  GL43#GL_COMPRESSED_RGBA8_ETC2_EAC COMPRESSED_RGBA8_ETC2_EAC,  GL43#GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC COMPRESSED_SRGB8_ALPHA8_ETC2_EAC,  GL43#GL_COMPRESSED_R11_EAC COMPRESSED_R11_EAC,  GL43#GL_COMPRESSED_SIGNED_R11_EAC COMPRESSED_SIGNED_R11_EAC,  GL43#GL_COMPRESSED_RG11_EAC COMPRESSED_RG11_EAC,  GL43#GL_COMPRESSED_SIGNED_RG11_EAC COMPRESSED_SIGNED_RG11_EAC, see  EXTTextureCompressionS3TC, see  EXTTextureCompressionLATC, see  ATITextureCompression3DC
     * @param width          the texture width
     * @param height         the texture height
     * @param border         the texture border width
     * @param format         the texel data format. One of: GL11#GL_STENCIL_INDEX STENCIL_INDEX,  GL11#GL_DEPTH_COMPONENT DEPTH_COMPONENT,  GL30#GL_DEPTH_STENCIL DEPTH_STENCIL,  GL11#GL_RED RED,  GL11#GL_GREEN GREEN,  GL11#GL_BLUE BLUE,  GL11#GL_ALPHA ALPHA,  GL30#GL_RG RG,  GL11#GL_RGB RGB,  GL11#GL_RGBA RGBA,  GL12#GL_BGR BGR,  GL12#GL_BGRA BGRA,  GL11#GL_LUMINANCE LUMINANCE,  GL11#GL_LUMINANCE_ALPHA LUMINANCE_ALPHA,  GL30#GL_RED_INTEGER RED_INTEGER,  GL30#GL_GREEN_INTEGER GREEN_INTEGER,  GL30#GL_BLUE_INTEGER BLUE_INTEGER,  GL30#GL_ALPHA_INTEGER ALPHA_INTEGER,  GL30#GL_RG_INTEGER RG_INTEGER,  GL30#GL_RGB_INTEGER RGB_INTEGER,  GL30#GL_RGBA_INTEGER RGBA_INTEGER,  GL30#GL_BGR_INTEGER BGR_INTEGER,  GL30#GL_BGRA_INTEGER BGRA_INTEGER
     * @param type           the texel data type. One of: GL11#GL_UNSIGNED_BYTE UNSIGNED_BYTE,  GL11#GL_BYTE BYTE,  GL11#GL_UNSIGNED_SHORT UNSIGNED_SHORT,  GL11#GL_SHORT SHORT,  GL11#GL_UNSIGNED_INT UNSIGNED_INT,  GL11#GL_INT INT,  GL30#GL_HALF_FLOAT HALF_FLOAT,  GL11#GL_FLOAT FLOAT,  GL12#GL_UNSIGNED_BYTE_3_3_2 UNSIGNED_BYTE_3_3_2,  GL12#GL_UNSIGNED_BYTE_2_3_3_REV UNSIGNED_BYTE_2_3_3_REV,  GL12#GL_UNSIGNED_SHORT_5_6_5 UNSIGNED_SHORT_5_6_5,  GL12#GL_UNSIGNED_SHORT_5_6_5_REV UNSIGNED_SHORT_5_6_5_REV,  GL12#GL_UNSIGNED_SHORT_4_4_4_4 UNSIGNED_SHORT_4_4_4_4,  GL12#GL_UNSIGNED_SHORT_4_4_4_4_REV UNSIGNED_SHORT_4_4_4_4_REV,  GL12#GL_UNSIGNED_SHORT_5_5_5_1 UNSIGNED_SHORT_5_5_5_1,  GL12#GL_UNSIGNED_SHORT_1_5_5_5_REV UNSIGNED_SHORT_1_5_5_5_REV,  GL12#GL_UNSIGNED_INT_8_8_8_8 UNSIGNED_INT_8_8_8_8,  GL12#GL_UNSIGNED_INT_8_8_8_8_REV UNSIGNED_INT_8_8_8_8_REV,  GL12#GL_UNSIGNED_INT_10_10_10_2 UNSIGNED_INT_10_10_10_2,  GL12#GL_UNSIGNED_INT_2_10_10_10_REV UNSIGNED_INT_2_10_10_10_REV,  GL30#GL_UNSIGNED_INT_24_8 UNSIGNED_INT_24_8,  GL30#GL_UNSIGNED_INT_10F_11F_11F_REV UNSIGNED_INT_10F_11F_11F_REV,  GL30#GL_UNSIGNED_INT_5_9_9_9_REV UNSIGNED_INT_5_9_9_9_REV,  GL30#GL_FLOAT_32_UNSIGNED_INT_24_8_REV FLOAT_32_UNSIGNED_INT_24_8_REV,  GL11#GL_BITMAP BITMAP
     * @param pixels         the texel data
     */
    void image2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, ByteBuffer pixels);
    /** Buffer object offset version of: {@link #image2D(int, int, int, int, int, int, int, int, ByteBuffer) } */
    void image2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, long pixelsOffset);
    /** ShortBuffer version of: {@link #image2D(int, int, int, int, int, int, int, int, ByteBuffer) } */
    void image2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, ShortBuffer pixels);
    /** IntBuffer version of: {@link #image2D(int, int, int, int, int, int, int, int, ByteBuffer) } */
    void image2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, IntBuffer pixels);
    /** FloatBuffer version of: {@link #image2D(int, int, int, int, int, int, int, int, ByteBuffer) } */
    void image2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, FloatBuffer pixels);
    /** DoubleBuffer version of: {@link #image2D(int, int, int, int, int, int, int, int, ByteBuffer) } */
    void image2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, DoubleBuffer pixels);
}
